AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  KeyName:
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    Description: To-do-list
    Type: AWS::EC2::KeyPair::KeyName
Resources:
  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: topic1
      TopicName: topic12
  SNSEmailSubscriptionGmail:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: email
      TopicArn: !Ref SNSTopic
      Endpoint: doriyataksh@gmail.com    

  MySQSQueue:
    Type: "AWS::SQS::Queue"
    Properties:
      QueueName: "mailsqsqueue"
      VisibilityTimeout: 300
      MaximumMessageSize: 2048
  MyLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile: |
          import json
          import boto3
          import os

          sns = boto3.client('sns')
          sqs = boto3.client('sqs', region_name='us-east-1') # Replace with your region name
          url=sqs.get_queue_url(QueueName='mailsqsqueue')['QueueUrl']
          topic_arn=os.environ['SNS_TOPIC_ARN']



          def publish_email_to_sns(recipient,email_message):

              print("inside sns")

              response = sns.publish(
                  TopicArn=topic_arn,
                  Message=email_message,
                  MessageAttributes={
                      'email': {
                          'DataType': 'String',
                          'StringValue': recipient
                      }
                  }
                  
              )
              print(response)

          def delete_message_from_sqs(receipt_handle):
              response = sqs.delete_message(
                  QueueUrl=url,
                  ReceiptHandle=receipt_handle
              )


          def lambda_handler(event, context):
              # TODO implement
              try:
                  for message in event['Records']:
                      message_body = json.loads(message['body'])
                      print("Received message: ", message_body)
                      receipt_handle = message['receiptHandle']
                      publish_email_to_sns(message_body.split()[-1],message_body)
                      #delete_message_from_sqs(receipt_handle)
              except Exception as e:
                  print("Error")
                  print(e)

      FunctionName: snsmailtrigger
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref SNSTopic
      Handler: index.lambda_handler
      Runtime: python3.9
      Role: arn:aws:iam::199421325206:role/LabRole
      Timeout: 60

  MyLambdaEventSourceMapping:
    Type: "AWS::Lambda::EventSourceMapping"
    Properties:
      BatchSize: 10
      Enabled: true
      EventSourceArn: !GetAtt MySQSQueue.Arn
      FunctionName: !GetAtt MyLambdaFunction.Arn
  TodoAppCreateFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile: |
          import boto3
          import json
          import uuid

          def lambda_handler(event, context):
              # Create a DynamoDB client
              dynamodb = boto3.client('dynamodb')
              

              print("this is even tobject: "+str(event))

              # Extract data from the event object
              data = json.loads(json.dumps(event))
              print(data)
              
              taskname = data['taskname']
              date = str(data['date'])
              description=data['description']
              priority=data['priority']
              email=data['email']
              status=data['task_status']
              json_data={
                      'id': {'S': str(uuid.uuid1())},
                      'taskname': {'S': taskname},
                      'date':{'S':date},
                      'description': {'S': description},
                      'priority':{'S':priority},
                      'email':{'S':email},
                      'task_status':{'S':status}
                  }

              # Put item in the table
              response = dynamodb.put_item(
                  TableName='todoapptable',
                  Item=json_data
              )
              
              f_message=f"New Task: {taskname} created at {date}  description: {description}  priority: {priority}  email: {email}"
              print(response)
              if response['ResponseMetadata']['HTTPStatusCode']==200:
                  print("sqs executed")
                  sqs=boto3.client('sqs',region_name='us-east-1')
                  url=sqs.get_queue_url(QueueName='mailsqsqueue')['QueueUrl']
                  response=sqs.send_message(
                      QueueUrl=url,
                      MessageBody=json.dumps(f_message)
                  )
                  print(response)
                  # TODO: write code...
                  # TODO: write code...

              # Return a response
              return {
                  'statusCode': 200,
                  'headers': {
                      'Content-Type': 'application/json'
                  },
                  'body': {
                      'message': 'Item added successfully'
                  }
              }
      Handler: index.lambda_handler
      Role: arn:aws:iam::199421325206:role/LabRole
      Runtime: python3.9
      FunctionName: TodoAppCreate

  TodoAppGetFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile: |
          import json
          import boto3
          import os

          def lambda_handler(event, context):

              # Create DynamoDB client
              dynamodb = boto3.resource('dynamodb')

              # Get DynamoDB table name from environment variable
              table_name = os.environ['TABLE_NAME']

              # Get table
              table = dynamodb.Table(table_name)

              # Query DynamoDB table
              response = table.scan()

              # Extract data from response
              items = response['Items']

              # Return response as JSON
              return {
                  'statusCode': 200,
                  'body': items
              }

      Handler: index.lambda_handler
      Environment:
        Variables:
          TABLE_NAME: "todoapptable"
      Role: arn:aws:iam::199421325206:role/LabRole
      Runtime: python3.9
      FunctionName: TodoAppGet

  TodoAppActionFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile: |
          import json
          import boto3

          def callSqs(response,data,opreation):
              f_message=f"Task: {data['taskname']} created at {data['date']}  description: {data['description']}  priority: {data['priority']} action: {opreation} email: {data['email']}"
              print(response)
              if response['ResponseMetadata']['HTTPStatusCode']==200:
                  print("sqs executed")
                  sqs=boto3.client('sqs',region_name='us-east-1')
                  url=sqs.get_queue_url(QueueName='mailsqsqueue')['QueueUrl']
                  response=sqs.send_message(
                      QueueUrl=url,
                      MessageBody=json.dumps(f_message)
                  )
                  print(response)


          def lambda_handler(event, context):
              
              # Get the ID of the item to update from the event
              id = event['id']
              opreation=event['action']
              date=event['date']
              
              print(type(id))
              # Create a DynamoDB resource
              dynamodb = boto3.resource('dynamodb')
              
              # Get the table to update
              table = dynamodb.Table('todoapptable')

              #get item from table first
              res=table.get_item(Key={
                  'id':str(id),
                  'date':str(date)
              })
              
              data=res.get('Item',{})
              print(data)
              
              # Update the item in the table

              try:
                  print(table.attribute_definitions)
                  if opreation=='complete':
                      response = table.update_item(
                      Key={
                          'id':str(id),
                          'date':str(date)
                      },
                      UpdateExpression='set task_status = :newStatusValue',
                      ExpressionAttributeValues={':newStatusValue': opreation}
                      )
                      callSqs(response,data,opreation)
                  elif opreation=='delete':
                      response=table.delete_item(Key={
                          'id':str(id),
                          'date':str(date)
                      })
                      callSqs(response,data,opreation)
                      
              except Exception as err:
                  print(err)

                
              
              # Return a response
              return {
                  'statusCode': 200,
                  'body':{
                      'message':'Task updated'
                  }
              }

          
      Handler: index.lambda_handler
      Role: arn:aws:iam::199421325206:role/LabRole
      Runtime: python3.9
      FunctionName: TodoAppAction


  MyTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: "todoapptable"
      AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "S"
        - AttributeName: "date"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "id"
          KeyType: "HASH"
        - AttributeName: "date"
          KeyType: "RANGE"
      BillingMode: "PAY_PER_REQUEST"

  RestApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      EndpointConfiguration:
        Types:
          - "REGIONAL"
      Name: 'my-api'
      Description: 'My API Gateway'

  Deployment:
    Type: 'AWS::ApiGateway::Deployment'
    DependsOn:
      - ApiGetMethodGet
    Properties:
      RestApiId: 
        Ref: RestApi
      StageName: prod

  # /create path resource and methods
  ApiResource:
    Type: 'AWS::ApiGateway::Resource'
    DependsOn: RestApi
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: 'create'

  ApiMethodOptions:
    Type: 'AWS::ApiGateway::Method'
    DependsOn: ApiResource
    Properties:
      HttpMethod: 'OPTIONS'
      RestApiId: !Ref RestApi
      ResourceId: !Ref ApiResource
      AuthorizationType: 'NONE'
      Integration:
        Type: 'MOCK'
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Credentials: "'true'"
            ResponseTemplates:
              application/json: ''
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
            method.response.header.Access-Control-Allow-Credentials: false
          StatusCode: '200'
  ApiMethodPost:
    Type: 'AWS::ApiGateway::Method'
    DependsOn: ApiResource
    Properties:
      HttpMethod: 'POST'
      RestApiId: !Ref RestApi
      ResourceId: !Ref ApiResource
      AuthorizationType: 'NONE'
      Integration:
        Type: 'AWS'
        IntegrationHttpMethod: 'POST'
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TodoAppCreateFunction.Arn}/invocations'
        PassthroughBehavior: WHEN_NO_MATCH
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Credentials: "'true'"          
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
            method.response.header.Access-Control-Allow-Credentials: false
          StatusCode: '200'


  # /action path resource and methods

  ApiActionResource:
    Type: 'AWS::ApiGateway::Resource'
    DependsOn: RestApi
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: 'action'

  ApiActionMethodOptions:
    Type: 'AWS::ApiGateway::Method'
    DependsOn: ApiActionResource
    Properties:
      HttpMethod: 'OPTIONS'
      RestApiId: !Ref RestApi
      ResourceId: !Ref ApiActionResource
      AuthorizationType: 'NONE'
      Integration:
        Type: 'MOCK'
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Credentials: "'true'"
            ResponseTemplates:
              application/json: ''
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
            method.response.header.Access-Control-Allow-Credentials: false
          StatusCode: '200'
  ApiActionMethodPost:
    Type: 'AWS::ApiGateway::Method'
    DependsOn: ApiActionResource
    Properties:
      HttpMethod: 'POST'
      RestApiId: !Ref RestApi
      ResourceId: !Ref ApiActionResource
      AuthorizationType: 'NONE'
      Integration:
        Type: 'AWS'
        IntegrationHttpMethod: 'POST'
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TodoAppActionFunction.Arn}/invocations'
        PassthroughBehavior: WHEN_NO_MATCH
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Credentials: "'true'"          
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
            method.response.header.Access-Control-Allow-Credentials: false
          StatusCode: '200'            

  ApiGetResource:
    Type: 'AWS::ApiGateway::Resource'
    DependsOn: RestApi
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: 'get'

  ApiGetMethodOptions:
    Type: 'AWS::ApiGateway::Method'
    DependsOn: ApiGetResource
    Properties:
      HttpMethod: 'OPTIONS'
      RestApiId: !Ref RestApi
      ResourceId: !Ref ApiGetResource
      AuthorizationType: 'NONE'
      Integration:
        Type: 'MOCK'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Credentials: "'true'"
            ResponseTemplates:
              application/json: ''
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
            method.response.header.Access-Control-Allow-Credentials: false
          StatusCode: '200'
  ApiGetMethodGet:
    Type: 'AWS::ApiGateway::Method'
    DependsOn: ApiGetResource
    Properties:
      HttpMethod: 'GET'
      RestApiId: !Ref RestApi
      ResourceId: !Ref ApiGetResource
      AuthorizationType: 'NONE'
      Integration:
        Type: 'AWS'
        IntegrationHttpMethod: 'POST'
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TodoAppGetFunction.Arn}/invocations'
        PassthroughBehavior: WHEN_NO_MATCH
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Credentials: "'true'"          
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
            method.response.header.Access-Control-Allow-Credentials: false
          StatusCode: '200'            

  ConfigLambdaCreatePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref TodoAppCreateFunction
      Principal: apigateway.amazonaws.com
    DependsOn: RestApi  

  ConfigLambdaActionPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref TodoAppActionFunction
      Principal: apigateway.amazonaws.com
    DependsOn: RestApi  

  LambdaGetPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref TodoAppGetFunction
      Principal: apigateway.amazonaws.com 
    DependsOn: RestApi

  EBSApplication:
    Type: AWS::ElasticBeanstalk::Application
    Properties:
      Description: EBS Frontend for todoapp
  EBSApplicationVersion:
    Type: AWS::ElasticBeanstalk::ApplicationVersion
    Properties:
      ApplicationName: !Ref EBSApplication
      Description: EBS Frontend for TO_DO_LIST Version 1.0
      SourceBundle:
        S3Bucket:  "es1-taksh-s3"
        S3Key: "todo_list.zip"
  EBSConfigurationTemplate:
    Type: AWS::ElasticBeanstalk::ConfigurationTemplate
    Properties:
      ApplicationName: !Ref EBSApplication
      Description: EBS TO-DO-List Template
      OptionSettings:
      - Namespace: aws:autoscaling:launchconfiguration
        OptionName: EC2KeyName   
        Value: !Ref KeyName
      - Namespace: aws:autoscaling:launchconfiguration
        OptionName: IamInstanceProfile   
        Value: !Ref MyInstanceProfile
      - Namespace: aws:elasticbeanstalk:application:environment
        OptionName: REACT_APP_API_URL
        Value: !Sub 'https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/prod'
      SolutionStackName: 64bit Amazon Linux 2 v5.8.0 running Node.js 16
  EBSEnvironment:
    Type: AWS::ElasticBeanstalk::Environment
    Properties:
      ApplicationName: !Ref EBSApplication
      Description: EBS Frontend for TO_DO_LIST Environment
      TemplateName: !Ref EBSConfigurationTemplate
      VersionLabel: !Ref EBSApplicationVersion
  MyInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Path: "/"
      Roles: ["LabRole"]



       
      